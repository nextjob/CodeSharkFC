{
CodeSharkFC

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>

CodeSharkFC editor portion based on:

SynEdit Plus

  Copyright (C) 2009 Dariusz Rorat drorat1@o2.pl

  This source is free software; you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free
  Software Foundation; either version 2 of the License, or (at your option)
  any later version.

  This code is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  details.

  A copy of the GNU General Public License is available on the World Wide Web
  at <http://www.gnu.org/copyleft/gpl.html>. You can also obtain it by writing
  to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
  MA 02111-1307, USA.
}

// to do:
//   in src.main.pas  TfrmMain.FormCreate
//     figure out special folders and save app info in
//     in AppData (C:\Users\**username**\AppData\Local\CodeSharkFC)
//   in FreeCAD.pas
//   g code generated by path vs pick geometry, I and J values signs differ??
//     who is correct

unit srcmain;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, lazfileutils, FileUtil, LResources, Forms, Controls,
  Graphics, Dialogs, Menus,
  ComCtrls, SynEdit, SynHighlighterAny, StdCtrls, Buttons, ExtCtrls,
  SynEditTypes, FindReplaceDialog,
  SourcePrinter, eventlog, editoroptions, LazUTF8, FreeCad, ugcodehl, LazSerial;

type

  { TfrmMain }

  TfrmMain = class(TForm)
    AutoCompleteBox: TComboBox;
    Logger: TEventLog;
    MenuItem1: TMenuItem;
    mnuTools: TMenuItem;
    mnuPlugIns: TMenuItem;
    mnuConfgurePort: TMenuItem;
    mnuSend: TMenuItem;
    mnuReceive: TMenuItem;
    mnuHighLighter: TMenuItem;
    mnuGutter: TMenuItem;
    MnuContents: TMenuItem;
    MnuAbout: TMenuItem;
    MnuFCRun: TMenuItem;
    MnuFCSettings: TMenuItem;
    MnuFreeCAD: TMenuItem;
    N4: TMenuItem;
    N3: TMenuItem;
    n2: TMenuItem;
    mnuSendToNotepad: TMenuItem;
    mnuInsertLastModification: TMenuItem;
    popDeleteSelection: TMenuItem;
    popSelectAll: TMenuItem;
    popPaste: TMenuItem;
    popCopy: TMenuItem;
    popCut: TMenuItem;
    popRedo: TMenuItem;
    popUndo: TMenuItem;
    mnuPrint: TMenuItem;
    mnyEditorSettings: TMenuItem;
    mnuInComment: TMenuItem;
    mnuBlock: TMenuItem;
    mnuReplace: TMenuItem;
    mnuFindNext: TMenuItem;
    mnuFind: TMenuItem;
    mnuConvertToLowercase: TMenuItem;
    mnuConvertToUppercase: TMenuItem;
    mnuConvert: TMenuItem;
    mnuInsertFilename: TMenuItem;
    mnuInsertTmestamp: TMenuItem;
    mnuInsert: TMenuItem;
    mnuDeleteSelection: TMenuItem;
    mnuStatusBar: TMenuItem;
    mnuToolbar: TMenuItem;
    mnuHelp: TMenuItem;
    mnuSettings: TMenuItem;
    mnuSelectAll: TMenuItem;
    mnuPaste: TMenuItem;
    mnuCopy: TMenuItem;
    mnuCut: TMenuItem;
    mnuRedo: TMenuItem;
    mnuUndo: TMenuItem;
    mnuEdit: TMenuItem;
    mnuExit: TMenuItem;
    mnuReread: TMenuItem;
    EditPopupMenu: TPopupMenu;
    cboQuickSearch: TComboBox;
    Label1: TLabel;
    MainMenu: TMainMenu;
    mnuSaveAs: TMenuItem;
    mnuNew: TMenuItem;
    mnuSave: TMenuItem;
    mnuOpen: TMenuItem;
    mnuFile: TMenuItem;
    OpenDialog: TOpenDialog;
    SaveDialog: TSaveDialog;
    btnNew: TSpeedButton;
    btnRedo: TSpeedButton;
    btnFind: TSpeedButton;
    btnReplace: TSpeedButton;
    Serial: TLazSerial;
    SpeedButton13: TSpeedButton;
    SpeedButton14: TSpeedButton;
    btnOpen: TSpeedButton;
    btnSave: TSpeedButton;
    btnPrint: TSpeedButton;
    btnCut: TSpeedButton;
    btnCopy: TSpeedButton;
    btnPaste: TSpeedButton;
    btnDeleteSelection: TSpeedButton;
    btnUndo: TSpeedButton;
    StatusBar: TStatusBar;
    SynEdit: TSynEdit;
    ToolBar: TToolBar;

    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var CloseAction: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure MnuAboutClick(Sender: TObject);
    procedure mnuConfgurePortClick(Sender: TObject);
    procedure MnuFCRunClick(Sender: TObject);
    procedure MnuFCSettingsClick(Sender: TObject);
    procedure mnuGutterClick(Sender: TObject);
    procedure mnuHighLighterClick(Sender: TObject);
    procedure mnuReceiveClick(Sender: TObject);
    procedure mnuSendClick(Sender: TObject);

    procedure mnuUndoClick(Sender: TObject);
    procedure mnuPrintClick(Sender: TObject);

    procedure mnuConvertToUppercaseClick(Sender: TObject);
    procedure mnuConvertToLowercaseClick(Sender: TObject);
    procedure mnuCopyClick(Sender: TObject);

    procedure mnuNewClick(Sender: TObject);

    procedure mnuOpenClick(Sender: TObject);
    procedure mnuRedoClick(Sender: TObject);
    procedure mnuRereadClick(Sender: TObject);
    procedure mnyEditorSettingsClick(Sender: TObject);
    procedure mnuDeleteSelectionClick(Sender: TObject);
    procedure mnuPasteClick(Sender: TObject);
    procedure mnuToolbarClick(Sender: TObject);
    procedure mnuStatusBarClick(Sender: TObject);
    procedure mnuInsertLastModificationClick(Sender: TObject);
    procedure mnuInsertTmestampClick(Sender: TObject);
    procedure mnuInsertFilenameClick(Sender: TObject);
    procedure mnuCutClick(Sender: TObject);
    procedure mnuExitClick(Sender: TObject);
    procedure mnuReplaceClick(Sender: TObject);
    procedure mnuSaveClick(Sender: TObject);
    procedure mnuSaveAsClick(Sender: TObject);
    procedure mnuSelectAllClick(Sender: TObject);
    procedure mnuFindClick(Sender: TObject);
    procedure mnuFindNextClick(Sender: TObject);
    procedure SerialRxData(Sender: TObject);
    procedure SynEditChange(Sender: TObject);
    procedure cboQuickSearchChange(Sender: TObject);

  private
    FileName: string;
    List: TStringList;
    FSynGCodeHl: TGCodeHl;
    procedure SetEditorOptions;
    procedure SetHLcolors;
    procedure AddLastModify;
  public
    { public declarations }
    AppDataPath: string;
  end;

const
  MyAppName = 'CodeSharkFC';
  CurVersion = '0.01b';
  //  custom script files found in AppData (C:\Users\**username**\AppData\Local\CodeSharkFC)
  StartupScript = 'StartupScript.py';
  PanelViewScript = 'PanelViewScript.py';
  ObserverScript = 'ObserverScript.py';
  ShutdownScript = 'ShutdownScript.py';
  FileNameUndefined = 'Undefined';


var
  frmMain: TfrmMain;
  MyFreeCADFrm: TFreeCadFrm;
  // flags set in SetFCparms, read from CodeSharkFC.ini
  LicenseRead: boolean;      // if set do not show about screen on startup
  LicenseShown: boolean;    // have we shown the license (about) at startup?


implementation

uses
  commandline, SetFCparms, About, EditColors, uReceive, uSend;

{$R *.lfm}


function SIndexof(const S: string; List: TStrings): integer;
var
  i: integer;
  boolFound: boolean;
begin
  i := -1;
  repeat
    Inc(i);
    boolFound := (Pos(S, List.Strings[i]) <> 0);
  until boolFound or (i = List.Count - 1);
  if boolFound then
    Result := i
  else
    Result := -1;
end;


{ TfrmMain }


procedure TfrmMain.SetEditorOptions;
begin
  SynEdit.Options := SynEditOptionsForm.Options;
  SynEdit.Options2 := SynEditOptionsForm.Options2;
  SynEdit.MaxUndo := SynEditOptionsForm.UndoLimit;
  SynEdit.BlockIndent := SynEditOptionsForm.BlockIndent;
  SynEdit.TabWidth := SynEditOptionsForm.TabWidth;
  SynEdit.RightEdge := SynEditOptionsForm.RightMargin;
end;

procedure TfrmMain.AddLastModify;
var
  r: integer;
  s: string;
  CommentStr: string;
begin
  CommentStr := '//';
  s := Format('%sLast modification date: %s', [CommentStr, DateTimeToStr(Now)]);
  r := SIndexOf(CommentStr + 'Last modification date', SynEdit.Lines);
  if r = -1 then
    SynEdit.Lines.Add(s)
  else
    SynEdit.Lines.Strings[r] := s;
end;

procedure TfrmMain.mnuOpenClick(Sender: TObject);
begin

  if SynEdit.Modified then
    if MessageDlg('File ' + ExtractFileName(FileName) + ' was modified. Save?',
      mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      mnuSaveClick(Self);

  if OpenDialog.Execute then
  begin
    try
      FileName := OpenDialog.FileName;
      SynEdit.Lines.LoadFromFile(FileName);
      Caption := ExtractFileName(FileName) + ' - CodeSharkFC+';

    except
      on E: Exception do
      begin
        MessageDlg('Error while loading file.', mtError, [mbOK], 0);
        Logger.Error(E.ClassName + ' : ' + E.Message);
      end;
    end;
  end;

end;

procedure TfrmMain.mnuRedoClick(Sender: TObject);
begin
  SynEdit.Redo;
end;

procedure TfrmMain.mnuRereadClick(Sender: TObject);
begin
  try
    if FileExists(UTF8ToSys(FileName)) then
    begin
      SynEdit.Lines.LoadFromFile(UTF8ToSys(FileName));
      Caption := ExtractFileName(FileName) + ' - Synedit+';
    end;
  except
    on E: Exception do
    begin
      MessageDlg('Error while loading file.', mtError, [mbOK], 0);
      Logger.Error(E.ClassName + ' : ' + E.Message);
    end;
  end;
end;

procedure TfrmMain.mnyEditorSettingsClick(Sender: TObject);
begin
  SynEditOptionsForm.ShowModal;
  if SynEditOptionsForm.ModalResult = mrOk then
  begin
    SetEditorOptions;
  end;
end;


procedure TfrmMain.mnuDeleteSelectionClick(Sender: TObject);
begin
  SynEdit.ClearSelection;
end;


procedure TfrmMain.mnuPasteClick(Sender: TObject);
begin
  SynEdit.PasteFromClipboard;
end;


procedure TfrmMain.mnuToolbarClick(Sender: TObject);
begin
  mnuToolbar.Checked := not mnuToolbar.Checked;
  ToolBar.Visible := mnuToolbar.Checked;
end;

procedure TfrmMain.mnuStatusBarClick(Sender: TObject);
begin
  mnuStatusBar.Checked := not mnuStatusBar.Checked;
  StatusBar.Visible := mnuStatusBar.Checked;
end;

procedure TfrmMain.mnuInsertLastModificationClick(Sender: TObject);
var
  D, C: string;
begin
  try
    C := '//';
    D := Format('%sLast modification: %s', [C, DateTimeToStr(Now)]);
    SynEdit.DoCopyToClipboard(D);
    SynEdit.PasteFromClipboard;
  except
    on E: Exception do
    begin
      MessageDlg('Error on last modification insert.', mtError, [mbOK], 0);
      Logger.Error(E.ClassName + ' : ' + E.Message);
    end;
  end;
end;

procedure TfrmMain.mnuInsertTmestampClick(Sender: TObject);
var
  dtNow: string;
begin
  try
    DateTimeToString(dtNow, 'dd-mm-yyyy hh:mm:ss', NOW);
    SynEdit.DoCopyToClipboard(dtNow);
    SynEdit.PasteFromClipboard;
  except
    on E: Exception do
    begin
      MessageDlg('Error on timestamp inserting.', mtError, [mbOK], 0);
      Logger.Error(E.ClassName + ' : ' + E.Message);
    end;
  end;
end;

procedure TfrmMain.mnuInsertFilenameClick(Sender: TObject);
begin
  try
    SynEdit.DoCopyToClipboard(FileName);
    SynEdit.PasteFromClipboard;
  except
    on E: Exception do
    begin
      MessageDlg('Error on filename inserting.', mtError, [mbOK], 0);
      Logger.Error(E.ClassName + ' : ' + E.Message);
    end;
  end;
end;

procedure TfrmMain.mnuCutClick(Sender: TObject);
begin
  SynEdit.CutToClipboard;
end;

procedure TfrmMain.mnuExitClick(Sender: TObject);
begin
  Close;
end;

procedure TfrmMain.mnuReplaceClick(Sender: TObject);
var
  synOptions: TSynSearchOptions;
begin
  synOptions := LazFindReplaceDialog.Options;
  with LazFindReplaceDialog do
  begin
    try
      Caption := 'Replace';
      Options := synOptions + [ssoReplace];
      ReplaceTextComboBox.Enabled := True;
      ReplaceWithLabel.Enabled := True;
      if ShowModal = mrOk then
        SynEdit.SearchReplace(LazFindReplaceDialog.FindText,
          LazFindReplaceDialog.ReplaceText,
          LazFindReplaceDialog.Options);
    except
      on E: Exception do
      begin
        MessageDlg('Error on replace text.', mtError, [mbOK], 0);
        Logger.Error(E.ClassName + ' : ' + E.Message);
      end;
    end;
  end;
end;

procedure TfrmMain.FormCreate(Sender: TObject);
begin
  FileName := 'Undefined';
  List := TStringList.Create;

  //  AppDataPath  := ExtractFilePath(ParamStr(0));

  AppDataPath := ExtractFilePath(ChompPathDelim(GetAppConfigDirUTF8(False)));

  AppDataPath := AppDataPath + MyAppName;
  // does the application's data directory exist?
  if not DirectoryExists(AppDataPath) then
  begin
    ShowMessage(AppDataPath + ' Does not exist, Creating');
    CreateDir(AppDataPath);
  end;
  //ShowMessage('AppDataPath: ' + AppDataPath);
  LicenseShown := False;
  // nil our soon to be created FreeCad Interface Dialog
  MyFreeCADFrm := nil;
  // Create the highlighter
  FSynGCodeHl := TGcodeHl.Create(Self);
end;

procedure TfrmMain.FormDestroy(Sender: TObject);
begin
  List.Free;
end;

procedure TfrmMain.FormClose(Sender: TObject; var CloseAction: TCloseAction);
var
  mr: integer;
begin
  if SynEdit.Modified then
  begin
    mr := MessageDlg('File ' + ExtractFileName(FileName) + ' was modified. Save?',
      mtConfirmation, [mbYes, mbNo, mbCancel], 0);
    if mr = mrYes then
      mnuSaveClick(Self)
    else if mr = mrCancel then
      CloseAction := caNone;
  end;
end;

procedure TfrmMain.FormActivate(Sender: TObject);
begin
  SetFCparmsFrm.LoadIni;
  if not (LicenseShown) then
    if not (LicenseRead) then
      AboutFrm.ShowModal;
  LicenseShown := True;
end;

procedure TfrmMain.FormShow(Sender: TObject);
begin
  if ParamCount > 0 then
  begin
    FileName := SysToUTF8(Non_Flag_Param(1));
    SynEdit.Lines.LoadFromFile(UTF8ToSys(FileName));

  end;
  Caption := ExtractFileName(FileName) + ' - CodeSharkFC';
  SetEditorOptions;
  //  set our version info
  AboutFrm.lblVer.Caption := CurVersion;
  // are we highlighting?
  if FrmColors.CBHighlight.Checked then
    SynEdit.Highlighter := FSynGCodeHl
  else
    SynEdit.Highlighter := nil;
  SynEdit.Invalidate;
end;

procedure TfrmMain.MnuAboutClick(Sender: TObject);
begin
  AboutFrm.ShowModal;
end;

procedure TfrmMain.mnuConfgurePortClick(Sender: TObject);
begin
  Serial.ShowSetupDialog;
end;

procedure TfrmMain.MnuFCRunClick(Sender: TObject);
begin
{
    From  https://www.thoughtco.com/tform-createaowner-aowner-1057563
    When you create Delphi objects dynamically that inherit from TControl, such as a TForm (representing
     a form/window in Delphi applications), the constructor "Create" expects an "Owner" parameter:
    Modeless forms. Use "Application" as the owner:
    var
    myForm : TMyForm;
    ...
    myForm := TMyForm.Create(Application) ;

    Now, when you terminate (exit) the application,
    the "Application" object will free the "myForm" instance.

}
  if MyFreeCADFrm = nil then
  begin
    SetFCparmsFrm.LoadIni; // make sure we have the setup info loaded for python
    MyFreeCADFrm := TFreeCadFrm.Create(Application);
    try
      MyFreeCADFrm.Show;
    except
      on E: Exception do
        ShowMessage(E.ClassName +
          ' error raised on MyFreeCAD form creation, with message : ' + E.Message);
    end;
  end
  else
    MyFreeCADFrm.Show;
end;

procedure TfrmMain.MnuFCSettingsClick(Sender: TObject);
begin
  SetFCparmsFrm.ShowModal;
end;

procedure TfrmMain.mnuGutterClick(Sender: TObject);
begin
  mnuGutter.Checked := not mnuGutter.Checked;
  Synedit.Gutter.Visible := mnuGutter.Checked;
  SynEdit.Invalidate;
end;

procedure TfrmMain.mnuHighLighterClick(Sender: TObject);
begin
  FrmColors.ShowModal;
  if FrmColors.ModalResult = mrOk then
  begin
    SetHLcolors;
    if FrmColors.CBHighlight.Checked then
      SynEdit.Highlighter := FSynGCodeHl
    else
      SynEdit.Highlighter := nil;
    SynEdit.Invalidate;
  end;
end;

procedure TfrmMain.mnuReceiveClick(Sender: TObject);
begin
 if SynEdit.Lines.Count > 0 then
     mnuNewClick(self);
 frmReceive.ShowModal;
end;

procedure TfrmMain.mnuSendClick(Sender: TObject);
begin
  frmSend.ShowModal;
end;


procedure TfrmMain.mnuUndoClick(Sender: TObject);
begin
  SynEdit.Undo;
end;

procedure TfrmMain.mnuPrintClick(Sender: TObject);
begin
  with TSourcePrinter.Create do
  begin
    try
      try
        ShowLineNumbers := False;
        Font := SynEdit.Font;
        Margin := 0;
        Execute(SynEdit.Lines);
      except
        on E: Exception do
        begin
          MessageDlg('Printer error', mtError, [mbOK], 0);
          Logger.Error(E.ClassName + ' : ' + E.Message);
        end;
      end;
    finally
      Free;
    end;
  end;
end;


procedure TfrmMain.mnuConvertToUppercaseClick(Sender: TObject);
begin
  SynEdit.SelText := UpCase(SynEdit.SelText);
end;

procedure TfrmMain.mnuConvertToLowercaseClick(Sender: TObject);
begin
  SynEdit.Seltext := LowerCase(SynEdit.SelText);
end;

procedure TfrmMain.mnuCopyClick(Sender: TObject);
begin
  SynEdit.CopyToClipboard;
end;

procedure TfrmMain.mnuNewClick(Sender: TObject);
begin
  if SynEdit.Modified then
    if MessageDlg('File ' + ExtractFileName(FileName) + ' was modified. Save?',
      mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      mnuSaveClick(Self);

  SynEdit.Lines.Clear;
  FileName := FileNameUndefined;
  Caption := ExtractFileName(FileName) + ' - CodeSharkFC';
end;

procedure TfrmMain.mnuSaveClick(Sender: TObject);
begin
  try
    if FileName = FileNameUndefined then
    begin
      SaveDialog.FileName := '';
      if SaveDialog.Execute then
      begin
        FileName := SaveDialog.FileName;
        //if (SynEditOptionsForm.CheckBox33.Checked) and (SynEdit.Modified) then
        // AddLastModify;

        SynEdit.Lines.SaveToFile(UTF8ToSys(FileName));
        SynEdit.Modified := False;
        Caption := ExtractFileName(FileName) + ' - CodeSharkFC';
      end;
    end
    else
    begin
      //if (SynEditOptionsForm.CheckBox33.Checked) and (SynEdit.Modified) then
      //AddLastModify;
      SynEdit.Lines.SaveToFile(UTF8ToSys(FileName));
      SynEdit.Modified := False;
      Caption := ExtractFileName(FileName) + ' - CodeSharkFC';
    end;
  except
    on E: Exception do
    begin
      MessageDlg('Error on saving file.', mtError, [mbOK], 0);
      Logger.Error(E.ClassName + ' : ' + E.Message);
    end;
  end;
end;

procedure TfrmMain.mnuSaveAsClick(Sender: TObject);
begin
  if FileName = FileNameUndefined then
    FileName := '';
  try
    SaveDialog.FileName := FileName;
    if SaveDialog.Execute then
    begin
      FileName := SaveDialog.FileName;
      SynEdit.Lines.SaveToFile(UTF8ToSys(FileName));
      Caption := ExtractFileName(FileName) + ' - CodeSharkFC';
      SynEdit.Modified := False;
    end;
  except
    on E: Exception do
    begin
      MessageDlg('Error on saving file.', mtError, [mbOK], 0);
      Logger.Error(E.ClassName + ' : ' + E.Message);
    end;
  end;
end;

procedure TfrmMain.mnuSelectAllClick(Sender: TObject);
begin
  SynEdit.SelectAll;
end;

procedure TfrmMain.mnuFindClick(Sender: TObject);
var
  synOptions: TSynSearchOptions;
begin
  synOptions := LazFindReplaceDialog.Options;
  with LazFindReplaceDialog do
  begin
    try
      Caption := 'Find';
      Options := synOptions - [ssoReplace];
      ReplaceTextComboBox.Enabled := False;
      ReplaceWithLabel.Enabled := False;
      if ShowModal = mrOk then
        SynEdit.SearchReplace(LazFindReplaceDialog.FindText,
          LazFindReplaceDialog.ReplaceText,
          LazFindReplaceDialog.Options);

    except
      on E: Exception do
      begin
        MessageDlg('Error on find text.', mtError, [mbOK], 0);
        Logger.Error(E.ClassName + ' : ' + E.Message);
      end;
    end;
  end;
end;

procedure TfrmMain.mnuFindNextClick(Sender: TObject);
begin
  SynEdit.SearchReplace(LazFindReplaceDialog.FindText,
    LazFindReplaceDialog.ReplaceText,
    LazFindReplaceDialog.Options - [ssoEntireScope]);
end;

procedure TfrmMain.SerialRxData(Sender: TObject);
var
  Str: string;
begin
  //  Serial.SynSer.ConvertLineEnd:=;
  Str := Serial.ReadData;

  // We test Str length because SerialRxData is being called with not data to read
  // Could be an issue with USB serial device, not sure???
  if Length(Str) > 0 then
  begin
    SynEdit.Lines.BeginUpdate;
    SynEdit.Lines.Add(Str);
    SynEdit.Lines.EndUpdate;
    frmReceive.TimeoutCount := 0;  //Reset last recv timeout count
    Inc(frmReceive.RecvCount);
  end;
  frmReceive.edtTimeOut.Text := IntToStr(frmReceive.TimeoutCount);
  frmReceive.edtLnsRecd.Text := IntTOStr(frmReceive.RecvCount);
end;

procedure TfrmMain.SynEditChange(Sender: TObject);
begin
  Caption := '*' + ExtractFileName(FileName) + ' - CodeSharkFC';
end;

procedure TfrmMain.SetHLColors;
begin
  FSynGCodeHl.G123Attri.Background := FrmColors.CCmboG1.Selected;
  FSynGCodeHl.GAttri.Background := FrmColors.CCmboOtherG.Selected;
  FSynGCodeHl.MAttri.Background := FrmColors.CCmboM.Selected;
  FSynGCodeHl.OAttri.Background := FrmColors.CCmboO.Selected;
  FSynGCodeHl.TAttri.Background := FrmColors.CCmboT.Selected;
  FSynGCodeHl.ZAttri.Background := FrmColors.CCmboZ.Selected;
  FSynGCodeHl.SpecialAttri.Background := FrmColors.CCmboCom.Selected;
end;

procedure TfrmMain.cboQuickSearchChange(Sender: TObject);
begin
  SynEdit.SearchReplace(cboQuickSearch.Text, '', [ssoEntireScope]);
end;


initialization

end.
